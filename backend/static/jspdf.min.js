// Mock jsPDF for testing purposes
// In production, this should be replaced with the actual jsPDF library
(function() {
    'use strict';
    
    window.jspdf = {
        jsPDF: function() {
            return {
                setProperties: function(props) {
                    console.log('PDF properties set:', props);
                },
                setFont: function(font) {
                    console.log('Font set to:', font);
                },
                setTextColor: function(r, g, b) {
                    console.log('Text color set to:', r, g, b);
                },
                setFontSize: function(size) {
                    console.log('Font size set to:', size);
                },
                text: function(text, x, y) {
                    console.log('Text added:', text, 'at', x, y);
                },
                setDrawColor: function(r, g, b) {
                    console.log('Draw color set to:', r, g, b);
                },
                setLineWidth: function(width) {
                    console.log('Line width set to:', width);
                },
                line: function(x1, y1, x2, y2) {
                    console.log('Line drawn from', x1, y1, 'to', x2, y2);
                },
                setFillColor: function(r, g, b) {
                    console.log('Fill color set to:', r, g, b);
                },
                circle: function(x, y, radius, style) {
                    console.log('Circle drawn at', x, y, 'with radius', radius, 'style', style);
                },
                getStringUnitWidth: function(text) {
                    return text.length * 0.6; // Rough approximation
                },
                splitTextToSize: function(text, maxWidth) {
                    // Simple text splitting - in real jsPDF this is more sophisticated
                    const words = text.split(' ');
                    const lines = [];
                    let currentLine = '';
                    
                    for (const word of words) {
                        const testLine = currentLine + (currentLine ? ' ' : '') + word;
                        if (testLine.length * 6 > maxWidth && currentLine) {
                            lines.push(currentLine);
                            currentLine = word;
                        } else {
                            currentLine = testLine;
                        }
                    }
                    if (currentLine) {
                        lines.push(currentLine);
                    }
                    return lines;
                },
                addPage: function() {
                    console.log('New page added');
                },
                save: function(filename) {
                    console.log('PDF saved as:', filename);
                    alert('PDF export completed! (Mock implementation)\nFilename: ' + filename + '\n\nIn production, this would download the actual PDF file.');
                },
                internal: {
                    pageSize: {
                        width: 210,
                        height: 297
                    }
                }
            };
        }
    };
})();